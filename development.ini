#
# MediaCore - Pylons development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#
# This file is for deployment specific config options -- other configuration
# that is always required for the app is done in the config directory, 
# and generally should not be modified by end users. 

[DEFAULT]
debug = true
# Uncomment and replace with the address which should receive any error reports
#email_to = you@yourdomain.com
smtp_server = localhost
error_email_from = paste@localhost

[server:main]
use = egg:Paste#http
host = 127.0.0.1 
port = 8080

[app:main]
use = egg:MediaCore
full_stack = true
#lang = ru
cache_dir = %(here)s/data
beaker.session.key = simple
beaker.session.secret = somesecret

media_dir = %(here)s/data/media
image_dir = %(here)s/mediacore/public/images

# The layout template name to wrap mediacore output in can be changed here
layout_template = layout

# Defines an external genshi template to wrap output in
external_template = false
external_template_name = php
external_template_url = http://tmcyouth.com/anthonys_genshi_template_2009.html
external_template_timeout = 600 # seconds

# If you'd like to fine-tune the individual locations of the cache data dirs
# for the Cache data, or the Session saves, un-comment the desired settings
# here:
#beaker.cache.data_dir = %(here)s/data/cache
#beaker.session.data_dir = %(here)s/data/sessions

# pick the form for your database
# %(here) may include a ':' character on Windows environments; this can
# invalidate the URI when specifying a SQLite db via path name
# sqlalchemy.url=postgres://username:password@hostname:port/databasename 

sqlalchemy.url = mysql://root:password@localhost/mediacore?charset=utf8


# If you have sqlite, here's a simple default to get you started
# in development

#sqlalchemy.url = sqlite:///%(here)s/devdata.db
#echo shouldn't be used together with the logging module.
sqlalchemy.echo = false
sqlalchemy.echo_pool = false
sqlalchemy.pool_recycle = 3600

# WARNING: *THE LINE BELOW MUST BE UNCOMMENTED ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#set debug = false

# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/lib/logging-config-fileformat.html

[loggers]
keys = root, mediacore, sqlalchemy, auth, tgi18n

[handlers]
keys = console

[formatters]
keys = generic

# If you create additional loggers, add them as a key to [loggers]
[logger_root]
level = INFO
handlers = console

[logger_mediacore]
level = DEBUG
handlers =
qualname = mediacore

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)


# A logger for authentication, identification and authorization -- this is
# repoze.who and repoze.what:
[logger_auth]
level = WARN
handlers = 
qualname = auth

# Hide the INFO warnings such as: [tg.i18n] Language ['en-us', 'en']: not supported
# TODO: Resolve this properly instead of just hiding the problem.
[logger_tgi18n]
level = WARN
handlers =
qualname = tg.i18n

# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S
